name: Build Cross-Platform Executables

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # macOS builds
          - os: macos
            arch: x64
            runner: macos-13
            python-version: '3.10'
            artifact-name: dronecan-batch-updater-macos-x64
            executable-name: dronecan-batch-updater
          - os: macos
            arch: arm64
            runner: macos-14
            python-version: '3.10'
            artifact-name: dronecan-batch-updater-macos-arm64
            executable-name: dronecan-batch-updater
          # Linux build
          - os: linux
            arch: x64
            runner: ubuntu-22.04
            python-version: '3.10'
            artifact-name: dronecan-batch-updater-linux-x64
            executable-name: dronecan-batch-updater
          # Windows build
          - os: windows
            arch: x64
            runner: windows-2022
            python-version: '3.10'
            artifact-name: dronecan-batch-updater-windows-x64
            executable-name: dronecan-batch-updater.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: requirements.txt

    - name: Restore Nuitka compilation cache (Linux)
      if: matrix.os == 'linux'
      uses: actions/cache/restore@v4
      with:
        path: |
          ~/.cache/Nuitka
          ~/.local/share/Nuitka/Cache
          ~/.cache/ccache
          dist/nuitka/main.build
        key: nuitka-${{ matrix.os }}-${{ matrix.arch }}
        restore-keys: |
          nuitka-${{ matrix.os }}-${{ matrix.arch }}
          nuitka-${{ matrix.os }}

    - name: Restore Nuitka compilation cache (macOS)
      if: matrix.os == 'macos'
      uses: actions/cache/restore@v4
      with:
        path: |
          ~/Library/Caches/Nuitka
          ~/Library/Caches/ccache
          dist/nuitka/main.build
        key: nuitka-${{ matrix.os }}-${{ matrix.arch }}
        restore-keys: |
          nuitka-${{ matrix.os }}-${{ matrix.arch }}
          nuitka-${{ matrix.os }}

    - name: Restore Nuitka compilation cache (Windows)
      if: matrix.os == 'windows'
      uses: actions/cache/restore@v4
      with:
        path: |
          ~/AppData/Local/Nuitka/Nuitka/Cache
          ~/AppData/Local/ccache
          dist/nuitka/main.build
        key: nuitka-${{ matrix.os }}-${{ matrix.arch }}
        restore-keys: |
          nuitka-${{ matrix.os }}-${{ matrix.arch }}
          nuitka-${{ matrix.os }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install ccache (Linux)
      if: matrix.os == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ccache
        echo "/usr/lib/ccache" >> $GITHUB_PATH

    - name: Run linting (Linux only)
      if: matrix.os == 'linux'
      run: |
        python lint.py
      continue-on-error: true

    - name: Build executable
      shell: bash
      run: |
        chmod +x build_nuitka.sh
        ./build_nuitka.sh

    - name: Test executable (basic smoke test)
      shell: bash
      run: |
        cd dist/nuitka
        if [[ "${{ matrix.os }}" == "windows" ]]; then
          timeout 5 ./main.dist/dronecan-batch-updater.exe --help || echo "Help command successful"
        else
          timeout 5 ./main.dist/dronecan-batch-updater --help || echo "Help command successful"
        fi

    - name: Prepare artifact
      shell: bash
      run: |
        cd dist/nuitka
        # Create a directory with the artifact name
        mkdir -p ../../artifacts/${{ matrix.artifact-name }}
        
        # Copy the entire standalone application directory
        # Nuitka creates main.dist directory for standalone builds
        cp -r main.dist/* ../../artifacts/${{ matrix.artifact-name }}/
        
        # Copy firmware directory
        cp -r ../../firmware ../../artifacts/${{ matrix.artifact-name }}/
        
        # Copy Here4 Batch Updater User Manual
        cp "../../Here4 Batch Update User Manual.md" ../../artifacts/${{ matrix.artifact-name }}/

        # Create a simple run script for each platform
        if [[ "${{ matrix.os }}" == "windows" ]]; then
          echo '@echo off' > ../../artifacts/${{ matrix.artifact-name }}/run.bat
          echo 'dronecan-batch-updater.exe %*' >> ../../artifacts/${{ matrix.artifact-name }}/run.bat
        else
          echo '#!/bin/bash' > ../../artifacts/${{ matrix.artifact-name }}/run.sh
          echo 'cd "$(dirname "$0")"' >> ../../artifacts/${{ matrix.artifact-name }}/run.sh
          echo './dronecan-batch-updater "$@"' >> ../../artifacts/${{ matrix.artifact-name }}/run.sh
          chmod +x ../../artifacts/${{ matrix.artifact-name }}/run.sh
        fi
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: artifacts/${{ matrix.artifact-name }}
        retention-days: 30

    - name: Save Nuitka compilation cache (Linux)
      if: matrix.os == 'linux'
      uses: actions/cache/save@v4
      with:
        path: |
          ~/.cache/Nuitka
          ~/.local/share/Nuitka/Cache
          ~/.cache/ccache
          dist/nuitka/main.build
        key: nuitka-${{ matrix.os }}-${{ matrix.arch }}

    - name: Save Nuitka compilation cache (macOS)
      if: matrix.os == 'macos'
      uses: actions/cache/save@v4
      with:
        path: |
          ~/Library/Caches/Nuitka
          ~/Library/Caches/ccache
          dist/nuitka/main.build
        key: nuitka-${{ matrix.os }}-${{ matrix.arch }}

    - name: Save Nuitka compilation cache (Windows)
      if: matrix.os == 'windows'
      uses: actions/cache/save@v4
      with:
        path: |
          ~/AppData/Local/Nuitka/Nuitka/Cache
          ~/AppData/Local/ccache
          dist/nuitka/main.build
        key: nuitka-${{ matrix.os }}-${{ matrix.arch }}

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: dronecan-batch-updater-*

    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        ls -la artifacts/

    - name: Extract version
      id: extract_version
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Upload Release Assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Upload each zip file to the release
        for zip_file in artifacts/*; do
          # create zip file for each folder
          if [[ -d "$zip_file" ]]; then
            zip_name="${zip_file##*/}.zip"
            zip -r "artifacts/$zip_name" "$zip_file"
            echo "Uploading $zip_name to release"
            gh release upload ${{ github.ref_name }} "artifacts/$zip_name" --clobber
          fi
        done

  test-builds:
    name: Test Builds
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Download Linux artifact
      uses: actions/download-artifact@v4
      with:
        name: dronecan-batch-updater-linux-x64
        path: test-build

    - name: Test Linux build
      run: |
        cd test-build
        chmod +x dronecan-batch-updater
        ./dronecan-batch-updater --help
        echo "Linux build test passed"